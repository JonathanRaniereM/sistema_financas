# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tela_cadastro.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
import datetime
from datetime import datetime

def obter_id_ano_mes_atual(conn):
    # Obtém o ano e mês atual
    data_atual = datetime.now()
    ano_atual = data_atual.year
    mes_atual = data_atual.strftime("%B")  # Obtém o nome completo do mês

    cursor = conn.cursor()

    # Verifica se o ano atual já existe na tabela Ano
    cursor.execute("SELECT idAno FROM Ano WHERE ano = %s", (ano_atual,))
    ano_id = cursor.fetchone()

    # Se não existir, insira o ano na tabela Ano
    if not ano_id:
        cursor.execute("INSERT INTO Ano (ano) VALUES (%s)", (ano_atual,))
        ano_id = cursor.lastrowid
    else:
        ano_id = ano_id[0]

    # Verifica se o mês atual já existe na tabela Meses
    cursor.execute("SELECT idMes FROM Meses WHERE mes = %s AND idAno = %s", (mes_atual, ano_id))
    mes_id = cursor.fetchone()

    # Se não existir, insira o mês na tabela Meses
    if not mes_id:
        cursor.execute("INSERT INTO Meses (mes, idAno) VALUES (%s, %s)", (mes_atual, ano_id))
        mes_id = cursor.lastrowid
    else:
        mes_id = mes_id[0]

    cursor.close()
    return ano_id, mes_id

class Ui_CadastroWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1930, 1077)
        
        
        self.tela_cadastro_widget = QtWidgets.QWidget(MainWindow)
        self.tela_cadastro_widget.setObjectName("tela_cadastro_widget")

        self.comboBox_DocN = QtWidgets.QComboBox(self.tela_cadastro_widget)
        self.comboBox_DocN.setGeometry(QtCore.QRect(580, 350, 821, 71))  # Ajuste as dimensões conforme necessário
        self.comboBox_DocN.setObjectName("comboBox_DocN")
        self.comboBox_DocN.addItem("PT")
        self.comboBox_DocN.addItem("PP")
        self.comboBox_DocN.addItem("PR")
        self.lineEdit_mes_header_2 = QtWidgets.QLineEdit(self.tela_cadastro_widget)
        self.lineEdit_mes_header_2.setGeometry(QtCore.QRect(580, 290, 301, 61))
        self.lineEdit_mes_header_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_mes_header_2.setStyleSheet("background-color: transparent;\n"
"font: 22pt \"Sans Serif Collection\";\n"
"color: rgb(51, 51, 51);\n"
"\n"
"\n"
"\n"
"border:none;\n"
"")
        self.lineEdit_mes_header_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_mes_header_2.setObjectName("lineEdit_mes_header_2")
        self.lineEdit_mes_header_3 = QtWidgets.QLineEdit(self.tela_cadastro_widget)
        self.lineEdit_mes_header_3.setGeometry(QtCore.QRect(580, 440, 301, 61))
        self.lineEdit_mes_header_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_mes_header_3.setStyleSheet("background-color: transparent;\n"
"font: 22pt \"Sans Serif Collection\";\n"
"color: rgb(51, 51, 51);\n"
"\n"
"\n"
"\n"
"border:none;\n"
"")
        self.lineEdit_mes_header_3.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_mes_header_3.setObjectName("lineEdit_mes_header_3")
        self.textEdit_Cliente = QtWidgets.QTextEdit(self.tela_cadastro_widget)
        self.textEdit_Cliente.setGeometry(QtCore.QRect(580, 500, 821, 71))
        self.textEdit_Cliente.setObjectName("textEdit_Cliente")
        self.textEdit_formaPagamento = QtWidgets.QTextEdit(self.tela_cadastro_widget)
        self.textEdit_formaPagamento.setGeometry(QtCore.QRect(570, 650, 821, 71))
        self.textEdit_formaPagamento.setObjectName("textEdit_formaPagamento")
        self.lineEdit_mes_header_4 = QtWidgets.QLineEdit(self.tela_cadastro_widget)
        self.lineEdit_mes_header_4.setGeometry(QtCore.QRect(570, 590, 301, 61))
        self.lineEdit_mes_header_4.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_mes_header_4.setStyleSheet("background-color: transparent;\n"
"font: 22pt \"Sans Serif Collection\";\n"
"color: rgb(51, 51, 51);\n"
"\n"
"\n"
"\n"
"border:none;\n"
"")
        self.lineEdit_mes_header_4.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_mes_header_4.setObjectName("lineEdit_mes_header_4")
        self.dateEdit = QtWidgets.QDateEdit(self.tela_cadastro_widget)
        self.dateEdit.setGeometry(QtCore.QRect(570, 800, 821, 71))
        font = QtGui.QFont()
        font.setFamily("Sans Serif Collection")
        font.setPointSize(18)
        self.dateEdit.setFont(font)
        self.dateEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.dateEdit.setObjectName("dateEdit")
        self.lineEdit_mes_header_5 = QtWidgets.QLineEdit(self.tela_cadastro_widget)
        self.lineEdit_mes_header_5.setGeometry(QtCore.QRect(570, 740, 301, 61))
        self.lineEdit_mes_header_5.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit_mes_header_5.setStyleSheet("background-color: transparent;\n"
"font: 22pt \"Sans Serif Collection\";\n"
"color: rgb(51, 51, 51);\n"
"\n"
"\n"
"\n"
"border:none;\n"
"")
        self.lineEdit_mes_header_5.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_mes_header_5.setObjectName("lineEdit_mes_header_5")
        self.lineEdit_valor = QtWidgets.QLineEdit(self.tela_cadastro_widget)
        self.lineEdit_valor.setGeometry(QtCore.QRect(580, 730, 821, 41))  # Ajuste a posição conforme necessário
        self.lineEdit_valor.setObjectName("lineEdit_valor")
        self.lineEdit_valor.setPlaceholderText("Insira o valor")  # Texto de ajuda para o usuário
        self.lineEdit_qntDividida = QtWidgets.QLineEdit(self.tela_cadastro_widget)
        self.lineEdit_qntDividida.setGeometry(QtCore.QRect(580, 780, 821, 41))  # Ajuste a posição conforme necessário
        self.lineEdit_qntDividida.setObjectName("lineEdit_qntDividida")
        self.lineEdit_qntDividida.setPlaceholderText("Insira a quantidade dividida")  # Texto de ajuda para o usuário
        self.pushButton = QtWidgets.QPushButton(self.tela_cadastro_widget)
        self.pushButton.setGeometry(QtCore.QRect(570, 920, 821, 91))
        self.pushButton.setStyleSheet("background-color: rgb(0, 210, 135);\n"
"color: rgb(255, 255, 255);\n"
"font: 20pt \"Sans Serif Collection\";\n"
"border-radius:10px;")
        self.pushButton.setObjectName("pushButton")
        self.pushButton = QtWidgets.QPushButton(self.tela_cadastro_widget)
        self.pushButton.setGeometry(QtCore.QRect(570, 920, 821, 91))
        self.pushButton.setStyleSheet("background-color: rgb(0, 210, 135);\n"
        "color: rgb(255, 255, 255);\n"
        "font: 20pt \"Sans Serif Collection\";\n"
        "border-radius:10px;")
        self.pushButton.setObjectName("pushButton")

        # Conectar o evento de clique do botão à função coletar_dados_do_formulario
        self.pushButton.clicked.connect(self.coletar_dados_do_formulario)

        self.pushButton_voltar = QtWidgets.QPushButton(self.tela_cadastro_widget)
        self.pushButton_voltar.setGeometry(QtCore.QRect(50, 70, 64, 64))
        self.pushButton_voltar.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_voltar.setStyleSheet("border-image: url(:/images_home/voltar.png);")
        self.pushButton_voltar.setText("")
        self.pushButton_voltar.setObjectName("pushButton_voltar")
        self.radioButton_entrada = QtWidgets.QRadioButton(self.tela_cadastro_widget)
        self.radioButton_entrada.setGeometry(QtCore.QRect(790, 290, 131, 21))
        self.radioButton_entrada.setStyleSheet("font: 16pt \"Sans Serif Collection\";\n"
"color: rgb(0, 210, 135);")
        self.radioButton_entrada.setObjectName("radioButton_entrada")
        self.radioButton_saida = QtWidgets.QRadioButton(self.tela_cadastro_widget)
        self.radioButton_saida.setGeometry(QtCore.QRect(1070, 290, 111, 21))
        self.radioButton_saida.setStyleSheet("font: 16pt \"Sans Serif Collection\";\n"
"color: rgb(246, 68, 68);")
        self.radioButton_saida.setObjectName("radioButton_saida")
        self.radioButton_entrada.clicked.connect(self.mostrarDocN)
        self.radioButton_saida.clicked.connect(self.ocultarDocN)

        self.menu_opcoes = QtWidgets.QMenuBar(MainWindow)
        self.menu_opcoes.setGeometry(QtCore.QRect(0, 0, 1930, 21))
        self.menu_opcoes.setObjectName("menu_opcoes")
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

        self.lineEdit_mes_header_2.setText(_translate("MainWindow", "DOC N°"))
        self.lineEdit_mes_header_3.setText(_translate("MainWindow", "CLIENTE"))
        self.lineEdit_mes_header_4.setText(_translate("MainWindow", "FORMA PAGAMENTO"))
        self.lineEdit_mes_header_5.setText(_translate("MainWindow", "DATA"))
        self.pushButton.setText(_translate("MainWindow", "Confirmar"))
        self.radioButton_entrada.setText(_translate("MainWindow", "ENTRADA"))
        self.radioButton_saida.setText(_translate("MainWindow", "SAIDA"))
        
    
    def mostrarDocN(self):
        self.comboBox_DocN.show()  # Mostra o QComboBox "DOC N°"
        self.lineEdit_mes_header_2.show() 
    def ocultarDocN(self):
        self.comboBox_DocN.hide()  # Oculta o QComboBox "DOC N°"
        self.lineEdit_mes_header_2.hide() 
    def coletar_dados_do_formulario(self):
        cursor = None  # Define o cursor como None inicialmente
        conn = None  # Define a conexão como None inicialmente
        try:
                # Conectar ao banco de dados
                conn = mysql.connector.connect(
                host='localhost',
                user='root',
                password='123456',
                database='sistema_financas',
                auth_plugin='mysql_native_password',
                use_pure=True,
                client_flags=[mysql.connector.ClientFlag.LOCAL_FILES]
                )

                # Obtém os IDs do ano e mês atual
                ano_id, mes_id = obter_id_ano_mes_atual(conn)

                # Coletar dados dos campos de entrada
                doc = self.comboBox_DocN.currentText()  # Correto
                cliente = self.textEdit_Cliente.toPlainText()  # Para QTextEdit
                forma_pagamento = self.textEdit_formaPagamento.toPlainText()  # Para QTextEdit
                valor_text = self.lineEdit_valor.text()  # Coleta o valor como texto
                # Substitui vírgulas por pontos para garantir o formato decimal correto
                valor_text = valor_text.replace(',', '.')
                try:
                        valor = float(valor_text)  # Tenta converter o texto formatado para um valor float
                except ValueError:
                        print("Valor inválido fornecido para o campo VALOR.")
                        return  # Interrompe a execução da função se o valor não for válido
                qnt_dividida = int(self.lineEdit_qntDividida.text())  # Converte o texto para inteiro

                data_text = QtCore.QDate.currentDate().toString("yyyy-MM-dd")  # Data atual no formato desejado
                tipo = "ENTRADA" if self.radioButton_entrada.isChecked() else "SAIDA"

                cursor = conn.cursor()

                # SQL de inserção atualizada para incluir VALOR e QNT_DIVIDIDA
                insert_query = """
                INSERT INTO Item (DOC, CLIENTE, FORMA_PAGAMENTO, DATA, TIPO, ID_MES, VALOR, QNT_DIVIDIDA) 
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                """
                values = (doc, cliente, forma_pagamento, data_text, tipo, mes_id, valor, qnt_dividida)

                # Executar a inserção
                cursor.execute(insert_query, values)

                # Commitar as mudanças no banco de dados
                conn.commit()

                print("Dados inseridos com sucesso.")

        except mysql.connector.Error as err:
                print(f"Erro ao inserir dados: {err}")
        finally:
                if cursor:  # Verifica se o cursor foi definido
                 cursor.close()
                if conn:  # Verifica se a conexão foi estabelecida
                 conn.close()
        # Limpe os campos do formulário após a inserção
        # Limpe os campos do formulário após a inserção
        self.comboBox_DocN.setCurrentIndex(0)  # Seleciona o primeiro item
        self.textEdit_Cliente.clear()
        self.textEdit_formaPagamento.clear()
        self.lineEdit_valor.clear()  # Limpar campo de VALOR
        self.lineEdit_qntDividida.setText("1")  # Correção para resetar QLineEdit de QUANTIDADE DIVIDIDA
        self.dateEdit.setDate(QtCore.QDate.currentDate())  # Resetar para a data atual
        self.radioButton_entrada.setChecked(False)
        self.radioButton_saida.setChecked(False)


import images_home.resources


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_CadastroWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
